'use client'

import React, { createContext, useContext, useState, useEffect } from 'react'

type Language = 'zh' | 'en'

type LanguageContextType = {
	language: Language
	setLanguage: (lang: Language) => void
	t: (key: string) => string
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined)

const translations = {
	en: {
		'Apps': 'Apps',
		'Applications': 'Applications',
		'Chat': 'Chat',
		'Edit': 'Edit',
		'Rename': 'Rename',
		'Delete': 'Delete',
		'Copy': 'Copy',
		'Copied': 'Copied',
		'Copied to clipboard': 'Copied to clipboard',
		'Cleaned up': 'Cleaned up',
		'Saved': 'Saved',
		'Run': 'Run',
		'Try "Run"': 'Try "Run"',
		'Please provide feedback': 'Please provide feedback',
		'Enter feedback': 'Enter feedback',
		'Upload file': 'Upload file',
		'Click or drag file into this area': 'Click or drag file into this area',
		'Drop file here': 'Drop file here',
		'Failed to fetch app config': 'Failed to fetch app config',
		'Fail to parse app config': 'Fail to parse app config',
		'Must be array': 'Must be array',
		'Failed to fetch chat api': 'Failed to fetch chat api',
		'Invalid Json': 'Invalid Json',
		'Time': 'Time',
		'No message': 'No message',
		'Please configure application':'Please configure application',
		'Config': 'Config',
		'No title': 'No title',
		'Please input': 'Please input',
		'Field must not be empty': 'Field must not be empty',
		'Please input': 'Please input',
		'Please select': 'Please select',
		'Unsupported type': 'Unsupported type',
		'Conversation parameters': 'Conversation parameters',
		'Parameters can not be updated during conversation': 'Parameters can not be updated during conversation',
		'Note': 'Note',
		'You might ask': 'You might ask',
		'Generated by AI and is for reference only': 'Generated by AI and is for reference only',
		'Thought': 'Thought',
		'Thinking': 'Thinking',




	},
	zh: {
		'Apps': '应用',
		'Applications': '应用管理',
		'Chat': '对话',
		'Edit': '编辑',
		'Rename': '重命名',
		'Delete': '删除',
		'Copy': '复制',
		'Copied': '已复制',
		'Copied to clipboard': '已复制到剪贴板',
		'Cleaned up': '已清理',
		'Saved': '已保存',
		'Run': '运行',
		'Try "Run"': '点击 "运行"',
		'Please provide feedback': '请提供反馈',
		'Enter feedback': '输入反馈内容',
		'Upload file': '上传文件',
		'Click or drag file into this area': '点击或拖拽文件到此',
		'Drop file here': '拖拽文件到此',
		'Failed to fetch app config': '获取应用配置失败',
		'Fail to parse app config': '解析应用配置失败',
		'Must be array': '必须是数组',
		'Failed to fetch chat api': '获取api失败',
		'Invalid Json': '无效的Json',
		'Time': '时间',
		'No message': '无消息',
		'Please configure application':'请先配置Dify应用',
		'Config': '配置',
		'No title': '无标题',
		'Please input': '请输入',
		'Field must not be empty': '域不能为空',
		'Please input': '请输入',
		'Please select': '请选择',
		'Unsupported type': '不支持的类型',
		'Conversation parameters': '对话参数',
		'Parameters can not be updated during conversation': '对话开始后，参数设置将无法修改',
		'Note': '提醒',
		'You might ask': '你可能想问',
		'Generated by AI and is for reference only': '内容由 AI 生成, 仅供参考',
		'Thought': '思考',
    'Thinking': '思考中',





	}
}

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
	const [language, setLanguage] = useState<Language>('zh')

	useEffect(() => {
		const storedLanguage = localStorage.getItem('language') as Language
		if (storedLanguage) {
			setLanguage(storedLanguage)
		}
	}, [])

	const changeLanguage = (lang: Language) => {
		setLanguage(lang)
		localStorage.setItem('language', lang)
	}

	const t = (key: string): string => {
		return (translations[language] as any)[key] || key
	}

	return (
		<LanguageContext.Provider value={{ language, setLanguage: changeLanguage, t }}>
			{children}
		</LanguageContext.Provider>
	)
}

export const useLanguage = () => {
	const context = useContext(LanguageContext)
	if (context === undefined) {
		throw new Error('useLanguage must be used within a LanguageProvider')
	}
	return context
}
